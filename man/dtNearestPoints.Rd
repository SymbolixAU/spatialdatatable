% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SpatialJoins.R
\name{dtNearestPoints}
\alias{dtNearestPoints}
\title{Nearest Points}
\usage{
dtNearestPoints(dt1, dt2, dt1Coords = NULL, dt2Coords = NULL,
  dt2Id = NULL, distanceCalculation = c("haversine"))
}
\arguments{
\item{dt1}{\code{data.table} containing the points to be matched onto}

\item{dt2}{\code{data.table} containing the points for which you want to find a match in \code{dt1}}

\item{dt1Coords}{vector containing the names of the columns of \code{dt1} containing the latitude and longitude (in that order) coordinates. If NULL, a 'best-guess' will be made}

\item{dt2Id}{string specifying the column of \code{dt2} containing a unique id for each point. If NULL, a value of the point's row index will be assigned}

\item{distanceCalculation}{distance measure}

\item{dt1Coords}{vector containing the names of the columns of \code{dt2} containing the latitude and longitude (in that order) coordinates. If NULL, a 'best-guess' will be made}
}
\description{
Finds the nearest points between two data tables.
}
\note{
\code{dt1} and \code{dt2} get updated by reference within the function call, which modifies the original \code{data.table} objects.
To avoid this behaviour you can use a \code{data.table::copy()} of the objects as the arguments for \code{dt1} and \code{dt2}. See Examples
}
\examples{
library(googleway) ## for the tram stops and routes data
library(data.table)

dt_stops <- as.data.table(tram_stops)
dt_route <- as.data.table(tram_route)
dtNearestPoints(dt1 = copy(dt_route),
  dt2 = copy(dt_stops),
  dt1Coords = c("shape_pt_lat", "shape_pt_lon"),
  dt2Coords = c("stop_lat","stop_lon"))

}
